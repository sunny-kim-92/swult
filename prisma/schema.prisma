// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL") // uses connection pooling
}

model user {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  image     String
  createdAt DateTime @default(now())
}

model card {
  id             Int              @id @default(autoincrement())
  setId          Int
  set            set              @relation(fields: [setId], references: [id])
  name           String
  subtitle       String?
  number         String?
  type           String?
  cost           Int?
  power          Int?
  hp             Int?
  frontText      String?
  frontArt       String?
  doubleSided    Boolean
  backText       String?
  backArt        String?
  rarity         String?
  unique         Boolean?
  artist         String?
  aspectsOnCards aspectsOnCards[]
  traitsOnCards  traitsOnCards[]
  keywordsOnCards keywordsOnCards[]
}

model set {
  id   Int    @id
  name String @unique
  card card[]
}

model aspect {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  color          String
  aspectsOnCards aspectsOnCards[]
}

model aspectsOnCards {
  aspect   aspect @relation(fields: [aspectId], references: [id])
  aspectId Int
  card     card   @relation(fields: [cardId], references: [id])
  cardId   Int

  @@id([aspectId, cardId])
}

model trait {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  traitsOnCards traitsOnCards[]
}

model traitsOnCards {
  trait   trait @relation(fields: [traitId], references: [id])
  traitId Int
  card    card  @relation(fields: [cardId], references: [id])
  cardId  Int

  @@id([traitId, cardId])
}

model keyword {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String @db.VarChar(5000)
  keywordsOnCards keywordsOnCards[]
}

model keywordsOnCards {
  keyword   keyword @relation(fields: [keywordId], references: [id])
  keywordId Int
  card    card  @relation(fields: [cardId], references: [id])
  cardId  Int

  @@id([keywordId, cardId])
}